import _extends from "@babel/runtime/helpers/esm/extends";
import deepMerge from "deepmerge";
import { ThemeModeEnum } from "../enums/themeModeEnum";

const arrayMerge = (destination, source) => source;

const getActiveMode = (theme, parent, mode) => {
  if (mode) return mode;
  if (theme && theme.colors && theme.colors.mode) return theme.colors.mode;
  if (parent && parent.colors && parent.colors.mode) return parent.colors.mode;
  return ThemeModeEnum.LIGHT;
};

const applyMode = (theme, mode) => {
  if (theme && theme.colors && theme.colors.modes) {
    const colors = _extends({}, theme.colors, {
      mode
    });

    if (theme.colors.modes[mode]) {
      return _extends({}, theme, {
        colors: deepMerge(colors, colors.modes[mode], {
          arrayMerge
        })
      });
    }

    if (theme.colors.modes[ThemeModeEnum.LIGHT]) {
      return _extends({}, theme, {
        colors: deepMerge(colors, colors.modes[ThemeModeEnum.LIGHT], {
          arrayMerge
        })
      });
    }

    return _extends({}, theme, {
      colors
    });
  }

  return theme;
};

const createTheme = (theme, mode) => parent => {
  const activeMode = getActiveMode(theme, parent, mode);
  const themeWithAppliedMode = applyMode(theme, activeMode);
  const parentWithAppliedMode = applyMode(parent, activeMode);
  if (parentWithAppliedMode && themeWithAppliedMode) return deepMerge(parentWithAppliedMode, themeWithAppliedMode, {
    arrayMerge
  });
  if (themeWithAppliedMode) return themeWithAppliedMode;
  if (parentWithAppliedMode) return parentWithAppliedMode;
  return {};
};

export default createTheme;